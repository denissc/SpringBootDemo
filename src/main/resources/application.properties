server.port=8080
spring.mandatory-file-encoding=UTF-8

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "drop_box_demo" as database name and
# "root" as username and password.
spring.datasource.url = jdbc:mysql://localhost:3306/drop_box_demo
spring.datasource.username = root
spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select * from users where email=?
spring.queries.roles-query=select u.email, r.role from users u inner join user_role ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?
# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

# ========================
# APPLICATION
# ========================

# Directory where will be saved uploaded files. Make sure that the application
# have write permissions on such directory.
demo.paths.uploadedFiles=/home/denissc/IdeaProjects/demo/src/main/resources/uploads